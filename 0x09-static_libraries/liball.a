!<arch>
0-isupper.c/    0           0     0     644     204       `
#include "main.h"

/**
 * _isupper - checks if character is uppercase
 * @c: the character to be checked
 * Return: 0
 */

int _isupper(int c)
{
	if (c > 64 && c < 91)
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     315       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte
 * @s: pointer to char
 * @b: byte to fill up memory
 * @n: amount of bytes to fill up
 *
 * Return: pointer to char(s)
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;

	return (s);
}

0-strcat.c/     0           0     0     644     320       `
#include "main.h"

/**
 * _strcat - concatinate src to dest
 * @dest: initial string
 * @src: string to be concatinated
 *
 * Return: a pointer to char(dest)
 */

char *_strcat(char *dest, char *src)
{
	int i, count;

	while (dest[i++])
		count++;

	for (i = 0; src[i]; i++)
		dest[count++] = src[i];

	return (dest);
}
100-atoi.c/     0           0     0     644     20        `
int _atoi(char *s);
1-isdigit.c/    0           0     0     644     21        `
int _isdigit(int c);

1-memcpy.c/     0           0     0     644     337       `
#include "main.h"

/**
 * _memcpy -  copies memory area from source to destination
 * @dest: destination
 * @src: Source
 * @n: amount(number of bytes) to be copied
 *
 * Return: pointer to char
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];

	return (dest);
}

1-strncat.c/    0           0     0     644     390       `
#include "main.h"

/**
 * _strncat - concatinates a string up to n
 * @dest: to be concatinated here
 * @src: to concatinate from here
 * @n: the limit of chars to be copied
 *
 * Return: pointer to char(dest)
 */

char *_strncat(char *dest, char *src, int n)
{
	int i, count;

	while (dest[i++])
		count++;

	for (i = 0; src[i] && i < n; i++)
		dest[count++] = src[i];

	return (dest);
}

2-strchr.c/     0           0     0     644     282       `
#include "main.h"

/**
 * _strchr - locates a character in a string
 * @s: the string
 * @c: the char to be located
 *
 * Return: pointer to char
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; i >= '\0'; i++)
	{
		if (s[i] == c)
			return (s + i);
	}
	return ('\0');
}
2-strlen.c/     0           0     0     644     254       `
#include "main.h"

/**
 * _strlen -  counts the length of a string
 * @s: the string
 *
 * Return: the length of the string (count)
 */

int _strlen(char *s)
{
	int count = 0;
	int i = 0;

	while (s[i] != '\0')
	{
		count++;
		i++;
	}
	return (count);
}
2-strncpy.c/    0           0     0     644     298       `
#include "main.h"

/**
 * _strncpy - copies a string from src to dest upto n characters
 * @dest: destination
 * @src: source
 * @n: n
 *
 * Return: pointer to char(dest)
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	while (src[i++] && i < n)
		dest[i] = src[i];

	return (dest);
}
3-islower.c/    0           0     0     644     244       `
#include "main.h"

/**
 * _islower - checks if a character is a lowercase alphabet
 * @c: the character being checked
 *
 * Return: 1 if lower case 0 if not
 */

int _islower(int c)
{
	if (c > 97 && c < 123)
		return (1);
	else
		return (0);
}
3-puts.c/       0           0     0     644     304       `
#include "main.h"

/**
 * _puts - prints a string to stdout, followed by a new line.
 * @str: string to be printed
 *
 * Return: nobe
 */

void _puts(char *str)
{
	int i = 0;
	int count = 0;

	while (str[i] != 0)
	{
		count++;
		i++;
	}

	for (i = 0; i < count; i++)
		_putchar(str[i]);
	_putchar(10);
}
3-strcmp.c/     0           0     0     644     283       `
#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: string 1
 * @s2: string two
 * Return: 0 if they are equal, 1 if s1 is greater, -1 if s1 is less
 */

int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2 && (*s1 == *s2))
	{
		s1++;
		s2++;
	}

	return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     479       `
#include "main.h"

/**
 * _strspn - gets the length of the prefix substring
 * @s: string
 * @accept: part of string that will be measures
 *
 * Return: int(number of bytes in the initial segment
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int count = 0;
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				count++;
				break;
			}

			else if (accept[i + 1] == '\0')
				return (count);
		}

		s++;
	}

	return (count);
}

4-isalpha.c/    0           0     0     644     233       `
#include "main.h"

/**
 * _isalpha - checks if a character is an alphabet
 * @c: the character being checked
 *
 * Return: 1 if alphabet 0 if not
 */

int _isalpha(int c)
{
	if (c > 65 && c < 123)
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     440       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: string to be checked
 * @accept: the set of bytes to be looked for
 *
 * Return: pointer to the the byte in s that matches one of the bytes in accept
 * returns NULL if none.
 */

char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
				return (s);
		}

		s++;
	}

	return ('\0');
}
5-strstr.c/     0           0     0     644     558       `
#include "main.h"

/**
 * _strstr - locates a substring within a string
 * @haystack: the string
 * @needle: the substring:
 *
 * Return: pointer to the beginnign of the located substring
 * (ptr2needle)
 */
char *_strstr(char *haystack, char *needle)
{
	int index;

	if (*needle == 0)
		return (haystack);

	while (*haystack)
	{
		index = 0;

		if (haystack[index] == needle[index])
		{
			do {
				if (needle[index + 1] == '\0')
					return (haystack);

				index++;

			} while (haystack[index] == needle[index]);
		}

		haystack++;
	}

	return ('\0');
}
6-abs.c/        0           0     0     644     176       `
#include "main.h"

/**
 * _abs - prints the absolute value of an int
 * @n:  the int to be checked
 *
 * Return: n
 */

int _abs(int n)
{
	if (n < 0)
		n *= -1;
	return (n);
}
9-strcpy.c/     0           0     0     644     269       `
#include "main.h"

/**
 * _strcpy - copies string from source to detination
 * @src: source
 * @dest: destination
 *
 * Return: pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
	int i = 0;

	while (src[i])
	{
		dest[i] = src[i];
		i++;
	}

	return (dest);
}

_putchar.c/     0           0     0     644     22        `
int _putchar(char c);
